name: Release

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'

env:
  BUILD_TYPE: Release

jobs:
  check-tag:
    runs-on: ubuntu-latest
    outputs:
      is_latest: ${{ steps.check_tag.outputs.is_latest }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch origin/main
        run: git fetch origin main

      - name: Ensure tag is on main
        id: check_tag
        run: |
          TAG_COMMIT=$(git rev-parse ${{ github.ref_name }})
          MAIN_COMMIT=$(git rev-parse origin/main)

          echo "Tag points to:     $TAG_COMMIT"
          echo "Main branch head:  $MAIN_COMMIT"

          if [ "$TAG_COMMIT" = "$MAIN_COMMIT" ]; then
            echo "✅ Tag points to latest commit on main."
            echo "is_latest=true" >> $GITHUB_OUTPUT
          else
            echo "❌ Tag does not point to the latest commit on main."
            echo "is_latest=false" >> $GITHUB_OUTPUT
          fi

  build-macos:
    needs: check-tag
    if: needs.check-tag.outputs.is_latest == 'true'
    runs-on: macos-13

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Dependencies
        run: |
          brew install cmake ninja

      - name: Set up Certificates
        run: |
          echo "$MACOS_APP_CERTIFICATE_BASE64" | base64 --decode > app_certificate.p12
          echo "$MACOS_INSTALLER_CERTIFICATE_BASE64" | base64 --decode > installer_certificate.p12

          security create-keychain -p "build" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "build" build.keychain
          security import app_certificate.p12 -k build.keychain -P "$MACOS_APP_CERTIFICATE_PASSWORD" -T /usr/bin/codesign
          security import installer_certificate.p12 -k build.keychain -P "$MACOS_INSTALLER_CERTIFICATE_PASSWORD" -T /usr/bin/productsign
          security set-key-partition-list -S apple-tool:,apple: -s -k "build" build.keychain
          security list-keychains -s build.keychain
          security find-identity -v build.keychain
        env:
          MACOS_APP_CERTIFICATE_BASE64: ${{ secrets.MACOS_CERTIFICATE_BASE64 }}
          MACOS_APP_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_CERTIFICATE_PASSWORD }}
          MACOS_INSTALLER_CERTIFICATE_BASE64: ${{ secrets.MACOS_INSTALLER_CERTIFICATE_BASE64 }}
          MACOS_INSTALLER_CERTIFICATE_PASSWORD: ${{ secrets.MACOS_INSTALLER_CERTIFICATE_PASSWORD }}

      - name: Set Environment Variables
        run: |
          TAG_NAME=${{ github.ref_name }}
          echo "VERSION_NUMBER=${TAG_NAME#v}" >> $GITHUB_ENV
          echo "BUNDLE_ID=$(sed -n 's/^set(JUCE_BUNDLE_ID[[:space:]]*"\(.*\)")/\1/p' CMakeLists.txt)" >> $GITHUB_ENV
          echo "PRODUCT_NAME=$(sed -n 's/^set(JUCE_PRODUCT_NAME[[:space:]]*"\(.*\)")/\1/p' CMakeLists.txt)" >> $GITHUB_ENV
          echo "TARGET_NAME=$(sed -n 's/^set(TARGET_NAME[[:space:]]*"\(.*\)")/\1/p' CMakeLists.txt)" >> $GITHUB_ENV

      - name: Configure
        run: cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} -G Ninja -B build -S .

      - name: Build
        run: cmake --build build --target ${{ env.TARGET_NAME }}_All -j

      - name: Sign Application
        run: |
          set -e
          CERT_NAME=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" | sed -E 's/.*"(.+)"$/\1/' | head -n 1)
          echo "Using cert: $CERT_NAME"
          security unlock-keychain -p "build" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "build" build.keychain

          echo "Signing main binary..."
          codesign --force --verbose --sign "$CERT_NAME" \
            --options runtime --timestamp \
            "build/${{ env.TARGET_NAME }}_artefacts/Release/Standalone/${{ env.PRODUCT_NAME }}.app/Contents/MacOS/${{ env.PRODUCT_NAME }}"

          echo "Signing full app bundle..."
          codesign --force --deep --verbose --sign "$CERT_NAME" \
            --options runtime --timestamp \
            "build/${{ env.TARGET_NAME }}_artefacts/Release/Standalone/${{ env.PRODUCT_NAME }}.app"

          echo "Verifying signature..."
          codesign --verify --deep --strict --verbose=4 "build/${{ env.TARGET_NAME }}_artefacts/Release/Standalone/${{ env.PRODUCT_NAME }}.app"

      - name: Sign VST3
        run: |
          set -e
          CERT_NAME=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" | sed -E 's/.*"(.+)"$/\1/' | head -n 1)
          echo "Using cert: $CERT_NAME"
          security unlock-keychain -p "build" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "build" build.keychain

          echo "Signing VST3..."
          codesign --force --deep --verbose --sign "$CERT_NAME" \
            --options runtime --timestamp \
            "build/${{ env.TARGET_NAME }}_artefacts/Release/VST3/${{ env.PRODUCT_NAME }}.vst3"

          echo "Verifying signature..."
          codesign --verify --deep --strict --verbose=4 "build/${{ env.TARGET_NAME }}_artefacts/Release/VST3/${{ env.PRODUCT_NAME }}.vst3"

      - name: Sign AU
        run: |
          set -e
          CERT_NAME=$(security find-identity -v -p codesigning build.keychain | grep "Developer ID Application" | sed -E 's/.*"(.+)"$/\1/' | head -n 1)
          echo "Using cert: $CERT_NAME"
          security unlock-keychain -p "build" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "build" build.keychain

          echo "Signing AU..."
          codesign --force --deep --verbose --sign "$CERT_NAME" \
            --options runtime --timestamp \
            "build/${{ env.TARGET_NAME }}_artefacts/Release/AU/${{ env.PRODUCT_NAME }}.component"

          echo "Verifying signature..."
          codesign --verify --deep --strict --verbose=4 "build/${{ env.TARGET_NAME }}_artefacts/Release/AU/${{ env.PRODUCT_NAME }}.component"

      - name: Prepare for pkgbuild
        run: |
          mkdir -p "dist/${{ env.PRODUCT_NAME }}_Installer/Root/Library/Audio/Plug-Ins/VST3"
          mkdir -p "dist/${{ env.PRODUCT_NAME }}_Installer/Root/Library/Audio/Plug-Ins/Components"
          mkdir -p "dist/${{ env.PRODUCT_NAME }}_Installer/Root/Applications"
          cp -Rp "build/juce_cmake_plugin_artefacts/Release/Standalone/${{ env.PRODUCT_NAME }}.app" \
                "dist/${{ env.PRODUCT_NAME }}_Installer/Root/Applications/"
          cp -Rp "build/juce_cmake_plugin_artefacts/Release/VST3/${{ env.PRODUCT_NAME }}.vst3" \
                "dist/${{ env.PRODUCT_NAME }}_Installer/Root/Library/Audio/Plug-Ins/VST3/"
          cp -Rp "build/juce_cmake_plugin_artefacts/Release/AU/${{ env.PRODUCT_NAME }}.component" \
                "dist/${{ env.PRODUCT_NAME }}_Installer/Root/Library/Audio/Plug-Ins/Components/"
          chmod +x "dist/${{ env.PRODUCT_NAME }}_Installer/Root/Applications/${{ env.PRODUCT_NAME }}.app/Contents/MacOS/${{ env.PRODUCT_NAME }}"
          chmod +x "dist/${{ env.PRODUCT_NAME }}_Installer/Root/Applications/${{ env.PRODUCT_NAME }}.app"
          chmod +x "dist/${{ env.PRODUCT_NAME }}_Installer/Root/Library/Audio/Plug-Ins/VST3/${{ env.PRODUCT_NAME }}.vst3/Contents/MacOS/${{ env.PRODUCT_NAME }}"
          chmod +x "dist/${{ env.PRODUCT_NAME }}_Installer/Root/Library/Audio/Plug-Ins/Components/${{ env.PRODUCT_NAME }}.component/Contents/MacOS/${{ env.PRODUCT_NAME }}"

      - name: pkgbuild
        run: |
          pkgbuild \
          --root "dist/${{ env.PRODUCT_NAME }}_Installer/Root/Library/Audio/Plug-Ins/VST3" \
          --install-location /Library/Audio/Plug-Ins/VST3 \
          --identifier ${{ env.BUNDLE_ID }}.vst3 \
          --version ${{ env.VERSION_NUMBER }} \
          ${{ env.PRODUCT_NAME }}_VST3.pkg
          pkgbuild \
          --root "dist/${{ env.PRODUCT_NAME }}_Installer/Root/Library/Audio/Plug-Ins/Components" \
          --install-location /Library/Audio/Plug-Ins/Components \
          --identifier ${{ env.BUNDLE_ID }}.component \
          --version ${{ env.VERSION_NUMBER }} \
          ${{ env.PRODUCT_NAME }}_AU.pkg
          pkgbuild \
          --component "dist/${{ env.PRODUCT_NAME }}_Installer/Root/Applications/${{ env.PRODUCT_NAME }}.app" \
          --install-location /Applications \
          --identifier ${{ env.BUNDLE_ID }}.app \
          --version ${{ env.VERSION_NUMBER }} \
          ${{ env.PRODUCT_NAME }}_App.pkg  

      - name: productbuild
        run: |
          cp LICENSE Resources/license.txt
          ls -l
          productbuild \
          --distribution distribution.xml \
          --resources Resources \
          --package-path . \
          ${{ env.PRODUCT_NAME }}_macOS_Unsigned.pkg

      - name: Sign installer
        run: |
          set -e
          CERT_NAME=$(security find-identity -v build.keychain | grep "Developer ID Installer" | sed -E 's/.*"(.+)"$/\1/' | head -n 1)
          echo "Using cert: $CERT_NAME"
          security unlock-keychain -p "build" build.keychain
          security set-key-partition-list -S apple-tool:,apple: -s -k "build" build.keychain

          echo "Signing Installer..."
          productsign --sign "$CERT_NAME" \
          ${{ env.PRODUCT_NAME }}_macOS_Unsigned.pkg \
          ${{ env.PRODUCT_NAME }}_macOS.pkg

          echo "Verifying signature..."
          pkgutil --check-signature ${{ env.PRODUCT_NAME }}_macOS.pkg

      - name: Notarize Installer
        run: |
          xcrun notarytool submit ${{ env.PRODUCT_NAME }}_macOS.pkg \
            --apple-id "${{ secrets.APPLE_DEVELOPER_ID }}" \
            --team-id "${{ secrets.APPLE_TEAM_ID }}" \
            --password "${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}" \
            --wait --output-format json > notarization_result.json

          echo "Notarization result:"
          cat notarization_result.json

      - name: Staple Notarization Ticket
        run: |
          xcrun stapler staple ${{ env.PRODUCT_NAME }}_macOS.pkg

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.PRODUCT_NAME }}-macOS
          path: ${{ env.PRODUCT_NAME }}_macOS.pkg

      - name: Cleanup Keychain
        if: always()
        run: |
          security delete-keychain build.keychain

#  build-windows:
#    needs: check-tag
#    if: needs.check-tag.outputs.is_latest == 'true'
#    runs-on: windows-latest
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Install Ninja
#        run: choco install ninja
#
#      - name: Set up MSVC Developer Command Prompt
#        uses: ilammy/msvc-dev-cmd@v1
#
#      - name: Configure with MSVC
#        run: cmake -DCMAKE_BUILD_TYPE=Release -G "Ninja" -B build -S .
#
#      - name: Build
#        run: cmake --build build --target ${{ env.TARGET_NAME }}_All -j
#
#      - name: Package
#        shell: pwsh
#        run: |
#          mkdir package
#          copy "build\${{ env.TARGET_NAME }}_artefacts\Release\Standalone\${{ env.PRODUCT_NAME }}.exe" package\
#          copy "build\${{ env.TARGET_NAME }}_artefacts\Release\VST3\${{ env.PRODUCT_NAME }}.vst3" package\
#          $zipName = "${{ env.PRODUCT_NAME }}_windows.zip"
#          Compress-Archive -Path package\* -DestinationPath "$zipName"
#
#      - name: Upload Artifacts
#        uses: actions/upload-artifact@v4
#        with:
#          name: ${{ env.PRODUCT_NAME }}-Windows
#          path: ${{ env.PRODUCT_NAME }}_windows.zip
#
#  build-linux:
#    needs: check-tag
#    if: needs.check-tag.outputs.is_latest == 'true'
#    runs-on: ubuntu-22.04
#
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v4
#
#      - name: Install Dependencies
#        run: |
#          sudo apt update
#          sudo apt install -y \
#            cmake ninja-build build-essential \
#            libasound2-dev libjack-jackd2-dev \
#            libx11-dev libfreetype6-dev libfontconfig1-dev \
#            libgl1-mesa-dev libcurl4-openssl-dev \
#            libxrandr-dev libxinerama-dev libxcursor-dev \
#            libxcomposite-dev libxext-dev \
#            libgtk2.0-dev
#
#      - name: Configure
#        run: |
#          cmake -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
#                -DCMAKE_EXE_LINKER_FLAGS="-lcurl" \
#                -G Ninja -B build -S .
#
#      - name: Build
#        run: cmake --build build --target ${{ env.TARGET_NAME }}_All -j
#
#      - name: Package
#        run: |
#          mkdir -p package
#          cp -r "build/${{ env.TARGET_NAME }}_artefacts/Release/Standalone/${{ env.PRODUCT_NAME }}" package/
#          cp -r "build/${{ env.TARGET_NAME }}_artefacts/Release/VST3/${{ env.PRODUCT_NAME }}.vst3" package/
#          cd package && zip -r ../${{ env.PRODUCT_NAME }}_linux.zip *
#
#      - name: Upload Artifacts
#        uses: actions/upload-artifact@v4
#        with:
#          name: ${{ env.PRODUCT_NAME }}-Linux
#          path: ${{ env.PRODUCT_NAME }}_linux.zip
#
#  release:
#    needs: [ build-macos, build-windows, build-linux ]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Download macOS artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: ${{ env.PRODUCT_NAME }}-macOS
#          path: artifacts/
#
#      - name: Download Windows artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: ${{ env.PRODUCT_NAME }}-Windows
#          path: artifacts/
#
#      - name: Download Linux artifact
#        uses: actions/download-artifact@v4
#        with:
#          name: ${{ env.PRODUCT_NAME }}-Linux
#          path: artifacts/
#
#      - name: Display downloaded files
#        run: ls -R artifacts
#
#      - name: Create GitHub Release and Upload Assets
#        uses: softprops/action-gh-release@v1
#        with:
#          tag_name: ${{ github.ref_name }}
#          name: ${{ github.ref_name }}
#          files: |
#            artifacts/${{ env.PRODUCT_NAME }}_macOS.pkg
#            artifacts/${{ env.PRODUCT_NAME }}_windows.zip
#            artifacts/${{ env.PRODUCT_NAME }}_linux.zip
#          draft: false
#          prerelease: false
#          generate_release_notes: true
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
